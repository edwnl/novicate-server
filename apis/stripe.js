const {l, isEmpty, round} = require('../utils/utils');
const {stripe_api} = require('../config.json');
const stripe = require('stripe')(`${stripe_api.secret_key}`);

/**
 * Transfers an amount to a stripe account from main account's balance.
 *
 * @param {number} amount The amount to transfer in AUD. (Automatically rounded to integer)
 * @param {string} accountID The ID of the Stripe account to transfer to.
 * @param {string} chargeID The ID of the original charge.
 * (https://stripe.com/docs/connect/charges-transfers#transfer-availability)
 */
async function transfer(amount, accountID, chargeID) {
  // Convert amount to cents as Stripe handles payments using cents.
  const amountInCents = Math.round(amount) * 100;

  return await stripe.transfers.create({
    amount: amountInCents,
    currency: 'aud',
    destination: accountID,
    source_transaction: chargeID,
    description: `[Novicate] Payment of ${round(amount)} AUD for tutoring session.`,
  });
}

/**
 * Verifies that a request was made by Stripe.
 *
 * More details: https://stripe.com/docs/webhooks/signatures
 *
 * @param {object} request The request.
 * @param {string} endpointSecret Endpoint Secret generated by Stripe for webhooks.
 */
async function verifyWebhook(request, endpointSecret) {
  // Get the signature sent by Stripe
  const signature = request.headers['stripe-signature'];
  try {
    return await stripe.webhooks.constructEvent(
        request.body,
        signature,
        endpointSecret,
    );
  } catch (e) {
    l(`Webhook signature verification failed: ${e.message}`);
    return null;
  }
}

/**
 * Retrieves a Stripe account ID using a SimplyBook tutor ID.
 *
 * This uses the metadata feature on stripe.
 * A SimplyBook tutor ID is attached to a connected account as metadata.
 * Example: https://i.imgur.com/7bg3D9Q.png
 *
 * @param {string} simplyBookID SimplyBook Tutor ID.
 * @return {Promise<string>} Stripe account ID.
 */
async function getStripeAccountByID(simplyBookID) {
  try {
    // List all connected accounts
    const accounts = await stripe.accounts.list();

    // Find the first account which has the matching ID
    const acc = accounts.data.find((acc) =>
      (!isEmpty(acc.metadata) && acc.metadata.simplybook_id === simplyBookID));

    // Return the account ID
    if (acc != null) return acc.id;
    return null;
  } catch (e) {
    console.log(e);
  }
}

module.exports = {transfer, verifyWebhook, getStripeAccountByID};
